chapter:AllgemeineModelleinstellungen[Allgemeine Modelleinstellungen]

In der Modelldatei wird als erstes Kommando die Applikation beschrieben. Die Syntax lautet:

code[JEELANG][
	application <Name> context <Context-Path> package <Package-Id> (timeout <Timeout-Minutes>) (<Project-State>) (strict);
]

Der Name ist ein String, der im Klartext die Applikation beschreibt. Der Context-Path ist ein String, der den Applikationskontext
festlegt. Dieser muss zwingend mit einem Schrägstrich "/" beginnen. Es ist der erste Teil der URI.

Optional kann der Session Timeout in Minuten festgelegt werden. Wird dieser nicht definiert, wird der Default des Application Servers
verwendet. Üblicherweise beträgt dieser Wert 30 Minuten. Als project-state können die drei Schlüsselwörter code[JEELANG][development],
code[JEELANG][integration] und code[JEELANG][productive] dienen und beschreiben den Zustand des Projektes. Abhängig davon wird z.B. 
das Logging entsprechend verschärft.

table[
	tr[
		td[]
		td[e[Datei]]
		td[code[JEELANG][development]]
		td[code[JEELANG][integration]]
		td[code[JEELANG][productive]]
	]
	tr[
		td[Logging Level]
		td[e[src-gen/<package>/log4j.properties]]
		td[DEBUG]
		td[DEBUG]
		td[INFO]
	]
	tr[
		td[Property hibernate.show_sql]
		td[e[res-gen/WEB-INF/classes/META-INF/persistence.xml]]
		td[true]
		td[false]
		td[false]
	]
	tr[
		td[Property eclipselink.logging.level]
		td[e[res-gen/WEB-INF/classes/META-INF/persistence.xml]]
		td[DEBUG]
		td[INFO]
		td[INFO]
	]
	tr[
		td[<context-param> javax.faces.PROJECT_STAGE]
		td[e[res-gen/WEB-INF/web.xml]]
		td[Development]
		td[SystemTest]
		td[Productive]
	]
]

Als letztes optionales Schlüsselwort dient code[JEELANG][strict]. Es entscheidet, ob in den Basisklassen der Action Handler die Standardmethoden
abstrakt vordefiniert werden und somit in den konkreten Klassen vorhanden sein müssen. Dadurch wird einerseits der Code besser, 
allerdings kann es vorkommen, dass die geforderten Methoden tatsächlich nicht gebraucht werden. Das kann aber nur bei starker 
Anpassung der XHTML-Masken passieren.

Nach dem code[JEELANG][application]-Kommando werden Optionen festgelegt, die das Verhalten der Web-Applikation näher beschreiben. Danach folgen 
die Beschreibungen der Entity Beans, welche auf einer ref:EntityBeans[eigenen Seite genauer beschrieben werden] und zuletzt die Aufgaben- bzw. 
Prozess-Umgebungen, in denen die Entity Beans benutzt werden sollen.

section:Applikationsoptionen[Applikationsoptionen]

Die Applikationsoptionen beschreiben die Web Applikation näher. Sie beeinflussen folgende Eigenschaften:
ol[
	item[Persistenz Kontexte]
	item[Verwendete Sprachen (Lokalisierung)]
	item[Mail]
	item[Security Domains]
	item[Parameter]
]

section2:PersistenzKontexte[Persistenz Kontexte]

Der JEE6-Generator unterstützt mehrere Persistenz Kontexte in einer Applikation. Das setzt voraus, dass in diesem Falle die
Datasources als XA-Datasource im Application Server konfiguriert sind. Die Syntax lautet:

code[JEELANG][
	persistence unit <Unit-Name> jndi <Jndi-Name> (cacheable) (MySQL|DB2|Oracle);
]

Der unit-name wird in der persistence.xml als Referenz innerhalb der Web Applikation verwendet. Der JNDI-Name definiert, wie die
Datasource im Application Server wiederzufinden ist. Eine eingehende Beschreibung, wie der JDNI-Name lauten sollte, findet sich auf
diesen Seiten. Wird das optionale Schlüsselwort cacheable verwendet, wird die Persistence Unit als Second Level Cache konfiguriert.

e[Hinweis]
Es reicht nicht, nur das cacheable Schlüsselwort zu setzen, um im Application Server Second Level Caching zu aktivieren. Es müssen
meistens noch am Application Server selbst noch Konfigurationen vorgenommen werden.

Es werden die Datenbanken
ul[
	item[MySQL (Default)]
    item[DB2]
    item[Oracle]
]
unterstützt. Die Angabe wird nötig, um in der generierten Datei persistence.xml den SQL-Sprachdialekt festzulegen.

section2:VerwendeteSprachen[Verwendete Sprachen (Lokalisierung)]

In mehrsprachigen Umgebungen ist die Lokalisierung der Applikation immer wünschenswert. Der JEE6-Generator hat für alle Komponenten
eine entsprechende Unterstützung parat. Die Auswahl der Sprache selbst wird typischerweise im Browser eingestellt. Die Web Applikation
erfährt das dadurch, dass die im Browser eingestellte Sprache im Request mitgeschickt wird. Die Lokalisierung wird über sog. Resource
Bundles vorgenommen. Diese werden in den XHTML-Seiten eingebunden. Für jedes Attribut, Entity Bean, etc. werden die dafür benötigten
Einträge in die Resource Bundles nachgetragen, sofern sie noch nicht enthalten sind. Bereits bestehende Einträge werden nicht
verändert. An dieser Stelle wird beschrieben, wie in der Modelldatei konfiguriert wird, welche Sprachen unterstützt werden sollen.
Die Syntax lautet:

code[JEELANG][
	locale <Language> (<Country>) (default);
]

Die e[language] ist der ISO-Code der zu verwendenden Sprache und hat typischerweise kleine Buchstaben. Der optionale Wert e[country]
bestimmt die ISO-Länderkennung typischerweise in Großbuchstaben. Dadurch werden landestypische Sprachvarianten unterschieden.

e[Hinweis!]
Es muss mindestens eine Locale-Definition vorhanden sein und genau eine braucht das ansonsten optionale Schlüsselwort default. Diese
Sprache wird verwendet, falls die im Browser eingestellte Sprache in den Resource Bundles nicht gefunden werden konnte.

section2:EMail[E-Mail]

Will die Web Applikation E-Mail verschicken, muss einerseits der Mail-Versand im Application Server konfiguriert sein, und
andererseits hier im Model eingetragen werden, unter welchem JDNI-Namen der Mailservice erreichbar ist. Dazu dient die einfache Syntax:

code[JEELANG][
	smtp <Jndi-Name>;
]

Mehr Information zum Thema Mail im JEE-Umfeld befinden sich auf diesen Seiten. Die auf diesen Seiten beschriebenen Einträge in den
genannten XML-Deskriptoren werden vom JEE6-Generator automatisch erzeugt. Die Resource muss manuell in dem DAO eingetragen werden,
in dem Mailing verwendet werden soll. Das dazugehörige Code-Schnipsel sieht folgendermaßen aus:

code[Java][
	@Resource(name="<jndi-name>")
	private javax.mail.Session mailSession;
]

Wird für e[jndi-name] "mail/Default" verwendet, muss im JBoss Application Server nichts mehr konfiguriert werden.

section2:SecurityDomain[Security Domain]

Sollen nur bestimmte User für bestimmte Bereiche (in der JEE6-Generator-Nomenklatur "Prozesse") Zugang haben, so muss eine sog.
Security Domain über einen JNDI-Namen referenziert werden. Dieser muss dementsprechen wie die E-Mail im Application Server
konfiguriert sein und benutzt den JAAS-Standard. Auf diesen Seiten befinden sich Informationen über die Konfiguration von JAAS.
Die Syntax lautet:

code[JEELANG][
	security domain <Jndi-Name> (clustered);
]

Das optionale Schlüsselwort code[JEELANG][clustered] bestimt, ob die Security Domain in einer geclusterten Umgebung funktionsfähig
sein muss.

section2:WebParameter[Web Parameter]

Mit Web-Parametern kann man der Web Applikation in der web.xml Parameter übergeben. Die Syntax lautet:

code[JEELANG][
	param <Key> = <Value> (description <Description>);
]

Die Einträge können beliebig häufig im Modell eingetragen werden. Aus folgender Modellzeile:
code[JEELANG][
	param de.itemis.purchasing.ITEMIKER = "itemis" description "LDAP-Gruppe aller itemiker";
]
wird in der web.xml:
code[XML][
<context-param>
    <description>LDAP-Gruppe aller itemiker</description>
    <param-name>de.itemis.purchasing.ITEMIKER</param-name>
    <param-value>itemis</param-value>
</context-param>
]

Mit der Methode String getInitParameter(final String key) in einem Action Handler kann auf diesen Wert zugegriffen werden. Die Werte
sind aus Sicht des Application Servers und der Applikation selbst nicht veränderlich.