
/*
 * Generated by Xtext/JEE6 Generator.
 * Copyright (C) 2012  itemis AG 
 * $Id$
 */

package org.jeegen.faces.handler;

import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;

import org.jeegen.faces.dao.AbstractInfoDaoBean;
import org.jeegen.faces.entities.EntityEntry;
import org.jeegen.faces.entities.HistoryEntry;
import org.jeegen.faces.entities.Startup;

/**
 * This managed bean class implements the action handlings for the following entity beans:
 * <ul>

 * <li>{@link EntityEntry}</li>

 * <li>{@link HistoryEntry}</li>

 * <li>{@link Startup}</li>

 * </ul>
 */
@ManagedBean
@SessionScoped
public class InfoHandler extends AbstractInfoHandler {
	private static final long serialVersionUID = 1L;

	private static final String NAV_INFO_ENTITYENTRY = "entityentry.xhtml";

	private static final String NAV_INFO_HISTORYENTRY = "historyentry.xhtml";

	private static final String NAV_INFO_STARTUP = "startup.xhtml";

	/*********************************************
	 * Startup startup
	 *********************************************/

	/**
	 * This method returns a {@link List} of all {@link Startup} beans.
	 *
	 * @return {@link List} of all {@link Startup} beans.
	 * @see AbstractInfoDaoBean#getStartupList()
	 */

	public List<Startup> getStartupList() {
		final List<Startup> list = dao.getStartupList();

		return list;
	}

	/**
	 * This method adds a new {@link Startup} bean.
	 *
	 * @param startup The new {@link Startup} bean to persist.
	 * @return The outcome where to go on success.
	 * @see AbstractInfoDaoBean#addStartup(Startup)
	 */

	public String addStartup(final Startup startup) {
		dao.addStartup(startup);
		setStartup(new Startup());
		return NAV_INFO_STARTUP;
	}

	/**
	 * This method sets the given {@link Startup} bean for editing.
	 *
	 * @param startup The {@link Startup} bean to edit.
	 * @return The outcome where to go on success.
	 */

	public String changeStartup(final Startup startup) {
		setStartup(startup);
		return NAV_INFO_STARTUP;
	}

	public String editEntityEntry(final Startup startup) {
		return NAV_INFO_ENTITYENTRY;
	}

	public String saveEntityEntry() {
		return NAV_INFO_ENTITYENTRY;
	}

	/**
	 * This method sets the given {@link Startup} bean for history editing. The
	 * history contains a {@link List} of {@link HistoryEntry} beans.
	 *
	 * @param startup The {@link Startup} bean to edit.
	 * @return The outcome where to go on success.
	 */

	public String editHistoryEntry(final Startup startup) {

		final HistoryEntry newHistoryEntity = new HistoryEntry();

		setStartup(startup);
		setHistoryEntry(newHistoryEntity);
		return NAV_INFO_HISTORYENTRY;
	}

	/**
	 * This method adds a {@link HistoryEntry} history bean to the
	 * given {@link Startup} bean for editing.
	 *
	 * @return The outcome where to go on success.
	 * @see AbstractInfoDaoBean#addToStartup(Startup, HistoryEntry)
	 */

	public String saveHistoryEntry() {

		dao.addToStartup(getStartup(), getHistoryEntry());
		setHistoryEntry(new HistoryEntry());

		return NAV_INFO_HISTORYENTRY;
	}

	/**
	 * This method sets the given {@link Startup} bean for editing.
	 *
	 * @return The outcome where to go on success.
	 * @see AbstractInfoDaoBean#updateStartup(Startup)
	 */

	public String saveStartup() {
		dao.updateStartup(getStartup());
		setStartup(new Startup());
		return NAV_INFO_STARTUP;
	}

	/**
	 * This method removes the given {@link Startup} bean.
	 *
	 * @param startup The {@link Startup} bean to remove.
	 * @return The outcome where to go on success.
	 * @see AbstractInfoDaoBean#deleteStartup(Startup)
	 */

	public String removeStartup(final Startup startup) {
		dao.deleteStartup(startup);
		return NAV_INFO_STARTUP;
	}

}
