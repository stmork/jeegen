import jee6;

extension de::itemis::jee6::generator::ext::model;
extension de::itemis::jee6::generator::ext::naming;

/*
 * Type
 */

Boolean isMany(Attribute t) :
	false;

String typeOf(Attribute t) :
	"Object";

String packageOf(Attribute t) :
	"java.lang";

String fqTypeOf(Attribute t) :
	packageOf(t) + "." + typeOf(t);

String annotationOf(Attribute t) :
	"@Column";

/*
 * Date
 */
String typeOf(Date d) :
	"Date";

String packageOf(Date d) :
	"java.util";

String annotationOf(Date d) :
	"@Column @Temporal(TemporalType.DATE)";
/*
 * Timestamp
 */
String typeOf(Timestamp ts) :
	"Date";

String packageOf(Timestamp ts) :
	"java.util";

String annotationOf(Timestamp ts) :
	"@Column @Temporal(TemporalType.TIMESTAMP)";

/*
 * Boolean
 */
String typeOf(jee6::Boolean i) :
	"boolean";

String packageOf(jee6::Boolean i) :
	"";

String fqTypeOf(jee6::Boolean i) :
	typeOf(i);

/*
 * Integer
 */
String typeOf(jee6::Integer i) :
	"int";

String packageOf(jee6::Integer i) :
	"";

String fqTypeOf(jee6::Integer i) :
	typeOf(i);

/*
 * Number
 */
String typeOf(Number n) :
	"double";

String packageOf(Number n) :
	"";

String fqTypeOf(Number n) :
	typeOf(n);

/*
 * Text
 */
String typeOf(Text t) :
	"String";

String fqTypeOf(Text t) :
	typeOf(t);

/*
 * Blob
 */
String typeOf(Blob lob) :
	"byte []";

String fqTypeOf(Blob lob) :
	typeOf(lob);

String annotationOf(Blob lob) :
	"@Column @Lob";

/*
 * Clob
 */
String typeOf(Clob lob) :
	"String";

String fqTypeOf(Clob lob) :
	typeOf(lob);

String annotationOf(Clob lob) :
	"@Column @Lob";

/*
 * History reference
 */
Boolean isMany(History ref) :
	true;

String typeOf(History ref) :
	typeOf(ref.type);

String packageOf(History ref) :
	packageOf(ref.type);

String annotationOf(History ref) :
	"@OneToMany(mappedBy=\"" + nameOf((Entity)ref.eContainer) + "\")";

/*
 * Entity reference
 */
Boolean isMany(EntityRef ref) :
	ref.many;

String typeOf(EntityRef ref) :
	typeOf(ref.type);

String packageOf(EntityRef ref) :
	packageOf(ref.type);

String annotationOf(EntityRef ref) :
	ref.many ? ("@OneToMany(mappedBy=\"" + nameOf((Entity)ref.eContainer) + "\")") : "@OneToOne";

/*
 * Options reference
 */
String typeOf(OptionRef ref) :
	typeOf(ref.type);

String packageOf(OptionRef ref) :
	packageOf(ref.type);

String annotationOf(OptionRef ref) :
	"@OneToOne";

String converterOf(OptionRef option) :
	typeOf(option) + "Converter";

/*
 * Entity
 */

Boolean isTransient(Attribute a) :
	false;

Boolean isTransient(Simple s) :
	s.transient;

Boolean isAbstract(Entity e) :
	e.filterable || e.types.exists(t|isTransient(t));

String abstractOf(Entity e) :
	(isAbstract(e) ? "Abstract" : "") + typeOf(e);

String typeOf(Entity e) :
	e.name.toFirstUpper();

String packageOf(Entity e) :
	getModel(e).package + ".entities";

String fqTypeOf(Entity e) :
	packageOf(e) + "." + typeOf(e);

String fqAbstractTypeOf(Entity e) :
	packageOf(e) + "." + abstractOf(e);

/*
 * Process
 */
String handlerOf(Process p) :
	"Abstract" + p.name + "Handler";

String handlerPackageOf(Process p) :
	getModel(p).package + ".handler";

String fqHandlerOf(Process p) :
	handlerPackageOf(p) + "." + handlerOf(p);

String daoOf(Process p) :
	p.name + "DaoBean";

String abstractDaoOf(Process p) :
	"Abstract" + p.name + "DaoBean";

String daoPackageOf(Process p) :
	getModel(p).package + ".dao";

String fqDaoOf(Process p) :
	daoPackageOf(p) + "." + daoOf(p);

String fqAbstractDaoOf(Process p) :
	daoPackageOf(p) + "." + abstractDaoOf(p);

/*
 * List handling
 */
String relationOfType(Attribute t) :
	isMany(t) ? "List<" + typeOf(t) + ">" : typeOf(t);

Boolean hasList(Entity t) :
	false;

Boolean hasList(Table t) :
	t.types.exists(e|isMany(e));

Boolean hasList(Options o) :
	o.types.exists(e|isMany(e));

List[String] packages(Entity t) :
	null;

private Boolean isNative(Attribute t) :
	(packageOf(t).length == 0) || packageOf(t).startsWith("java.lang");

List[String] packages(Options o) :
	o.types.reject(t|isNative(t)).fqTypeOf().toSet();

List[String] packages(Table t) :
	t.types.reject(t|isNative(t)).fqTypeOf().toSet();
	