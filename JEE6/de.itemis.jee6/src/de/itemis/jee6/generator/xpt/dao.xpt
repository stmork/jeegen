«IMPORT jee6»

«EXTENSION de::itemis::jee6::generator::ext::entity»
«EXTENSION de::itemis::jee6::generator::ext::model»
«EXTENSION de::itemis::jee6::generator::ext::types»
«EXTENSION de::itemis::jee6::generator::ext::naming»
«EXTENSION de::itemis::jee6::generator::ext::converter»
«EXTENSION de::itemis::jee6::generator::ext::dao»

«DEFINE Main FOR Process»
«EXPAND AbstractDao»
«EXPAND Dao»
«ENDDEFINE»

«DEFINE Dao FOR Process»
«FILE daoFilename(this) IMPL»
package «daoPackageOf(this)»;

import javax.ejb.Stateless;
import javax.interceptor.Interceptors;
import de.itemis.jee6.util.Profiler;

@Stateless
@Interceptors(Profiler.class)
public class «daoOf(this)» extends «abstractDaoOf(this)»
{
}
«ENDFILE»
«ENDDEFINE»

«DEFINE AbstractDao FOR Process»
«FILE abstractDaoFilename(this)»
«LET getOptionsList(this) AS converterList»
package «daoPackageOf(this)»;

import javax.persistence.*;

«IF properties.size > 0»
import javax.annotation.Resource;
«ENDIF»

«IF converterList.size > 0»
import java.util.List;
«FOREACH converterList AS option»
import «fqTypeOf(option)»;
«IF isEnumeration(option)»
import «fqTypeOf(option)».«enumOf(option)»;
«ENDIF»
«ENDFOREACH»
«ENDIF»

abstract public class «abstractDaoOf(this)»
{
«FOREACH getPersistenceUnits(getModel(this)) AS pu»
	@PersistenceContext(unitName="«pu.persistence»")
	protected EntityManager em;
«ENDFOREACH»

«FOREACH properties AS property»
	@Resource
	protected «typeOf(property)» «nameOf(property)»«EXPAND Default FOR property»;
«ENDFOREACH»

«FOREACH converterList AS option»
	/**********************************
	 * «typeOf(option)»
	 **********************************/
«LET getId(option) AS id»
«IF id == null»
«IF option.keys.size > 0»
	public «typeOf(option)» ensure(final «enumOf(option)» type, final String key)
	{
		«typeOf(option)» option = em.find(«typeOf(option)».class, type.ordinal());
		
		if (option == null)
		{
			option = new «typeOf(option)»(type, key);
			em.persist(option);
		}
		return option;
	}

	public «typeOf(option)» «finderOf(option)»(final «enumOf(option)» type)
	{
		return «finderOf(option)»(type.ordinal());
	}
«ENDIF»

	public «typeOf(option)» «finderOf(option)»(final int id)
«ELSE»
	public «typeOf(option)» «finderOf(option)»(final «typeOf(id)» id)
«ENDIF»
	{
		return em.getReference(«typeOf(option)».class, id);
	} 

	public List<«typeOf(option)»> «listOf(option)»()
	{
		TypedQuery<«typeOf(option)»> query = em.createQuery(
				"SELECT o FROM «typeOf(option)» o",
				«typeOf(option)».class);
		
		return query.getResultList();
	}
«IF hasActivationBoolean(option)»

	public List<«typeOf(option)»> «listActiveOf(option)»()
	{
		TypedQuery<«typeOf(option)»> query = em.createQuery(
				"SELECT o FROM «typeOf(option)» o WHERE o.active = TRUE",
				«typeOf(option)».class);
		
		return query.getResultList();
	}
«ENDIF»
«ENDLET»
«ENDFOREACH»
}
«ENDLET»
«ENDFILE»
«ENDDEFINE»

«DEFINE Default FOR jee6::Property»
«ERROR "Abstract Property"»
«ENDDEFINE»

«DEFINE Default FOR TextProp»
«IF value != null»
= "«value»"
«ENDIF»
«ENDDEFINE»

«DEFINE Default FOR IntegerProp»
«IF value != null»
= «value»
«ENDIF»
«ENDDEFINE»

«DEFINE Default FOR BooleanProp»
«IF value != null»
= «value»
«ENDIF»
«ENDDEFINE»
