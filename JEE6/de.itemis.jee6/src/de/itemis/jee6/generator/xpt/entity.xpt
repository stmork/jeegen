«IMPORT jee6»

«EXTENSION de::itemis::jee6::generator::ext::types»
«EXTENSION de::itemis::jee6::generator::ext::naming»
«EXTENSION de::itemis::jee6::generator::ext::entity»

«DEFINE Main FOR Entity»
«FILE filename(this)»
package «packageOf(this)»;

import java.io.Serializable;
import javax.persistence.*;

«IF hasList(this)»
import java.util.List;
«ENDIF»

«FOREACH packages() AS pkg»
import «pkg»;
«ENDFOREACH»

@Entity
@Table(name="«typeOf(this)»")
«IF types.exists(e|isTransient(e))»
abstract
«ENDIF»
public class «typeOf(this)» implements Serializable
{
	private static final long serialVersionUID = 1L;

«EXPAND Id»
«EXPAND GetterSetter»
«EXPAND Sorting»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE Id FOR Entity»
«ENDDEFINE»

«DEFINE Property FOR Attribute»
«IF isTransient()»
	@Transient
	public abstract «relationOfType()» «getterOf()»();
«ELSE»
	private «relationOfType()» «nameOf()»;

«IF isId()»
	@Id
«ELSE»
	«annotationOf()»
«ENDIF»
	public «relationOfType()» «getterOf()»()
	{
		return this.«nameOf()»;
	}

	public void «setterOf()»(«relationOfType()» «nameOf()»)
	{
		this.«nameOf()» = «nameOf()»;
	}
«ENDIF»
«ENDDEFINE»

«DEFINE Property FOR Entity»
	private «typeOf()» «nameOf()»;

	@ManyToOne
	public «typeOf()» «getterOf()»()
	{
		return this.«nameOf()»;
	}

	public void «setterOf()»(«typeOf()» «nameOf()»)
	{
		this.«nameOf()» = «nameOf()»;
	}
«ENDDEFINE»

«DEFINE GetterSetter FOR Entity»
«EXPAND Property FOREACH types»
«EXPAND Property FOREACH getEntityReferences()»
«ENDDEFINE»

«DEFINE Sorting FOR Entity»
«ENDDEFINE»

«DEFINE Id FOR Options»
«IF keys.size > 0»
	public static enum Type
	{
«FOREACH keys AS key SEPARATOR ","»
	«key.toUpperCase().replaceAll("\\.", "_")»
«ENDFOREACH»
	}

	private String key;

	@Column
	public String getKey() {
		return this.key;
	}

	public void setKey(String key) {
		this.key = key;
	}
«ENDIF»

«IF !types.exists(e|isId(e))»
	private int    id;

	@Id
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
«ENDIF»
«ENDDEFINE»

«DEFINE Id FOR Table»
«IF !types.exists(e|isId(e))»
	private int id;

	@Id
	@TableGenerator(
			name="id«nameOf(this)»", table = "IDs",
			pkColumnName = "id", valueColumnName = "value", pkColumnValue = "«nameOf(this)»",
			initialValue = 1, allocationSize = 10)
	@GeneratedValue(strategy=GenerationType.TABLE, generator="id«nameOf(this)»")
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}
«ENDIF»
«ENDDEFINE»

«DEFINE Sorting FOR Options»
	@Override
	public int hashCode()
	{
		return super.hashCode();
	}

	@Override
	public boolean equals(Object object)
	{
		if ((object == null) || !(object instanceof «typeOf(this)»))
		{
			return false;
		}
		«typeOf(this)» option = («typeOf(this)»)object;
«LET getId() AS id»
«IF id == null»
		return getId() == option.getId();
«ELSE»
		return «getterOf(id)»().equals(option.«getterOf(id)»());
«ENDIF»
«ENDLET»
	}
«ENDDEFINE»
