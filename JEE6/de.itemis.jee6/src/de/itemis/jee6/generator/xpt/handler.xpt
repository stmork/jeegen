«IMPORT jee6»

«EXTENSION de::itemis::jee6::generator::ext::entity»
«EXTENSION de::itemis::jee6::generator::ext::model»
«EXTENSION de::itemis::jee6::generator::ext::types»
«EXTENSION de::itemis::jee6::generator::ext::naming»
«EXTENSION de::itemis::jee6::generator::ext::converter»
«EXTENSION de::itemis::jee6::generator::ext::dao»

«DEFINE Main FOR Process»
«EXPAND Handler»
«EXPAND BaseHandler»
«ENDDEFINE»

«DEFINE Handler FOR Process»
«FILE handlerFilename(this)»
«LET getConverterReferencesList(this) AS converterList»
package «handlerPackageOf(this)»;

import javax.ejb.EJB;
import «fqDaoOf()»;

«IF converterList.size > 0»
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import java.util.List;
«FOREACH converterList AS option»
import «fqTypeOf(option)»;
«ENDFOREACH»
«ENDIF»

abstract public class «handlerOf(this)» extends AbstractHandler
{
	private static final long serialVersionUID = 1L;
	
	@EJB
	protected «daoOf()» dao;

«IF converterList.size > 0»
	private static final String NULL = "[NULL]";
	private static boolean isNull(final Object input)
	{
		return (input == null) || NULL.equals(input);
	}
«ENDIF»

«FOREACH converterList AS option»
	/**********************************
	 * «typeOf(option)» converter
	 **********************************/
	private final «converterOf(option)» «nameOf(option)» = new «converterOf(option)»();

	private class «converterOf(option)» implements Converter
	{
«LET getId(option) AS id»
		@Override
		public Object getAsObject(final FacesContext context, final UIComponent component, final String input)
		{
«IF id == null»
			return isNull(input) ? null : dao.«finderOf(option)»(Integer.parseInt(input));
«ELSE»
			return isNull(input) ? null : dao.«finderOf(option)»(input);
«ENDIF»
		}

		@Override
		public String getAsString(FacesContext context, UIComponent component, Object input)
		{
			final String result;
			
			if (isNull(input))
			{
				result = NULL;
			}
			else
			{
				final «typeOf(option)» option = («typeOf(option)»)input;
«IF id == null»
				result = Integer.toString(option.getId());
«ELSE»
				result = option.«getterOf(id)»();
«ENDIF»
			}
			return result;
		}
«ENDLET»
	}
	
	public List<«typeOf(option)»> «listOf(option)»()
	{
		return dao.«listOf(option)»();
	}
	
«IF hasActivationBoolean(option)»
	public List<«typeOf(option)»> «listActiveOf(option)»()
	{
		return dao.«listActiveOf(option)»();
	}
«ENDIF»
	
	public «converterOf(option)» «converterGetter(option)»()
	{
		return «nameOf(option)»;
	}
«ENDFOREACH»
}
«ENDLET»
«ENDFILE»
«ENDDEFINE»

«DEFINE BaseHandler FOR Process»
«FILE baseHandlerFilename(this)»
package «handlerPackageOf(this)»;

import java.io.Serializable;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;

abstract public class AbstractHandler implements Serializable
{
	private static final long serialVersionUID = 1L;

	protected final ExternalContext getExternalContext()
	{
		final FacesContext context = FacesContext.getCurrentInstance();

		return context != null ? context.getExternalContext() : null;
	}

	protected final HttpSession getSession()
	{
		ExternalContext context = getExternalContext();
		
		return context != null ? (HttpSession) context.getSession(false) : null;
	}
}
«ENDFILE»
«ENDDEFINE»
