/*
* generated by Xtext
*/
package de.itemis.jee6.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

import de.itemis.jee6.jee6.*;
import de.itemis.jee6.jee6.Boolean;
import de.itemis.jee6.jee6.Integer;
import de.itemis.jee6.jee6.Number;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class DslLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public DslLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	String text(Model model)
	{
		return model.getName();
	}
	
	String image(Model model)
	{
		return "jee6_16.gif";
	}
	
	String text(Persistence p)
	{
		return p.getJndi() + " -> " + p.getPersistence();
	}

	String image(Persistence p)
	{
		return "outline/datasource.gif";
	}

	String image (Security s)
	{
		return "outline/security.gif";
	}

	String text(Locale l)
	{
		return l.getLanguage();
	}

	String image(Locale l)
	{
		return "outline/locale.gif";
	}

	String text(Mail m)
	{
		return m.getJndi();
	}

	String image(Mail m)
	{
		return "outline/mail.gif";
	}

	String image(Option o)
	{
		return "outline/option.gif";
	}

	String text(Entity e)
	{
		return e.getName().concat(" : ").concat(e.eClass().getName());
	}

	String image(Entity e)
	{
		return "outline/entity.gif";
	}

	String text (Attribute a)
	{
		return a.getName() + " : " + a.eClass().getName();
	}

	String image(Attribute a)
	{
		return "outline/element.gif";
	}

	String image(Boolean a)
	{
		return "outline/element_bool.gif";
	}

	String image(Text a)
	{
		return "outline/element_text.gif";
	}

	String image(Integer a)
	{
		return "outline/element_integer.gif";
	}

	String image(Number a)
	{
		return "outline/element_number.gif";
	}

	String image(Blob a)
	{
		return "outline/element_blob.gif";
	}

	String image(Clob a)
	{
		return "outline/element_clob.gif";
	}

	String text (EntityRef er)
	{
		return er.getName() + (er.isMany() ? "[] : " : " : ") + er.getType().eClass().getName();
	}

	String text (Reference r)
	{
		return r.getName() + " : " + r. eClass().getName();
	}

	String image(Reference r)
	{
		return "outline/entity.gif";
	}

	String image(Property p)
	{
		return "outline/option.gif";
	}
}
